import xml.etree.ElementTree as ET
import os
from enum import Enum

class _Color(Enum):
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEM = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    RESET = '\033[0m'

class ShellTextArt:
    _shell_text_art = ""

    def __init__(self, text : str, delimiter : str = '', color : str = 'RESET', config_file : str = None):
        character_map = {' ': [' ', ' ', ' ', ' ', ' ', ' '], 'A': ['░█████╗░', '██╔══██╗', '███████║', '██╔══██║', '██║░░██║', '╚═╝░░╚═╝'], 'B': ['██████╗░', '██╔══██╗', '██████╦╝', '██╔══██╗', '██████╦╝', '╚═════╝░'], 'C': ['░█████╗░', '██╔══██╗', '██║░░╚═╝', '██║░░██╗', '╚█████╔╝', '░╚════╝░'], 'D': ['██████╗░', '██╔══██╗', '██║░░██║', '██║░░██║', '██████╔╝', '╚═════╝░'], 'E': ['███████╗', '██╔════╝', '█████╗░░', '██╔══╝░░', '███████╗', '╚══════╝'], 'F': ['███████╗', '██╔════╝', '█████╗░░', '██╔══╝░░', '██║░░░░░', '╚═╝░░░░░'], 'G': ['░██████╗░', '██╔════╝░', '██║░░██╗░', '██║░░╚██╗', '╚██████╔╝', '░╚═════╝░'], 'H': ['██╗░░██╗', '██║░░██║', '███████║', '██╔══██║', '██║░░██║', '╚═╝░░╚═╝'], 'I': ['██╗', '██║', '██║', '██║', '██║', '╚═╝'], 'J': ['░░░░░██╗', '░░░░░██║', '░░░░░██║', '██╗░░██║', '╚█████╔╝', '░╚════╝░'], 'K': ['██╗░░██╗', '██║░██╔╝', '█████═╝░', '██╔═██╗░', '██║░╚██╗', '╚═╝░░╚═╝'], 'L': ['██╗░░░░░', '██║░░░░░', '██║░░░░░', '██║░░░░░', '███████╗', '╚══════╝'], 'M': ['███╗░░░███╗', '████╗░████║', '██╔████╔██║', '██║╚██╔╝██║', '██║░╚═╝░██║', '╚═╝░░░░░╚═╝'], 'N': ['███╗░░██╗', '████╗░██║', '██╔██╗██║', '██║╚████║', '██║░╚███║', '╚═╝░░╚══╝'], 'O': ['░█████╗░', '██╔══██╗', '██║░░██║', '██║░░██║', '╚█████╔╝', '░╚════╝░'], 'P': ['██████╗░', '██╔══██╗', '██████╔╝', '██╔═══╝░', '██║░░░░░', '╚═╝░░░░░'], 'Q': ['░██████╗░', '██╔═══██╗', '██║██╗██║', '╚██████╔╝', '░╚═██╔═╝░', '░░░╚═╝░░░'], 'R': ['██████╗░', '██╔══██╗', '██████╔╝', '██╔══██╗', '██║░░██║', '╚═╝░░╚═╝'], 'S': ['░██████╗', '██╔════╝', '╚█████╗░', '░╚═══██╗', '██████╔╝', '╚═════╝░'], 'T': ['████████╗', '╚══██╔══╝', '░░░██║░░░', '░░░██║░░░', '░░░██║░░░', '░░░╚═╝░░░'], 'U': ['██╗░░░██╗', '██║░░░██║', '██║░░░██║', '██║░░░██║', '╚██████╔╝', '░╚═════╝░'], 'V': ['██╗░░░██╗', '██║░░░██║', '╚██╗░██╔╝', '░╚████╔╝░', '░░╚██╔╝░░', '░░░╚═╝░░░'], 'W': ['░██╗░░░░░░░██╗', '░██║░░██╗░░██║', '░╚██╗████╗██╔╝', '░░████╔═████║░', '░░╚██╔╝░╚██╔╝░', '░░░╚═╝░░░╚═╝░░'], 'X': ['██╗░░██╗', '╚██╗██╔╝', '░╚███╔╝░', '░██╔██╗░', '██╔╝╚██╗', '╚═╝░░╚═╝'], 'Y': ['██╗░░░██╗', '╚██╗░██╔╝', '░╚████╔╝░', '░░╚██╔╝░░', '░░░██║░░░', '░░░╚═╝░░░'], 'Z': ['███████╗', '╚════██║', '░░███╔═╝', '██╔══╝░░', '███████╗', '╚══════╝'], '0': ['░█████╗░', '██╔══██╗', '██║░░██║', '██║░░██║', '╚█████╔╝', '░╚════╝░'], '1': ['░░███╗░░', '░████║░░', '██╔██║░░', '╚═╝██║░░', '███████╗', '╚══════╝'], '2': ['██████╗░', '╚════██╗', '░░███╔═╝', '██╔══╝░░', '███████╗', '╚══════╝'], '3': ['██████╗░', '╚════██╗', '░█████╔╝', '░╚═══██╗', '██████╔╝', '╚═════╝░'], '4': ['░░██╗██╗', '░██╔╝██║', '██╔╝░██║', '███████║', '╚════██║', '░░░░░╚═╝'], '5': ['███████╗', '██╔════╝', '██████╗░', '╚════██╗', '██████╔╝', '╚═════╝░'], '6': ['░█████╗░', '██╔═══╝░', '██████╗░', '██╔══██╗', '╚█████╔╝', '░╚════╝░'], '7': ['███████╗', '╚════██║', '░░░░██╔╝', '░░░██╔╝░', '░░██╔╝░░', '░░╚═╝░░░'], '8': ['░█████╗░', '██╔══██╗', '╚█████╔╝', '██╔══██╗', '╚█████╔╝', '░╚════╝░'], '9': ['░█████╗░', '██╔══██╗', '╚██████║', '░╚═══██║', '░█████╔╝', '░╚════╝░']}
        self._color = color

        if config_file: character_map = self._read_config(config_file)

        self._shell_text_art = self._map_characters(text, delimiter, character_map)
    
    def __str__(self) -> str:
        return getattr(_Color, self._color).value + self._shell_text_art + _Color.RESET.value
    
    def _read_config(self, config_file):
        tree = ET.parse(os.path.abspath(config_file))
        root = tree.getroot()

        character_map = {}
        for character in root.findall('character'):
            id = character.get('ID')
            text = character.text
            character_map[id] = text.split('\n')
        return character_map

    def _map_characters(self, text, delimiter, character_map):
        try:
            ascii_characters = [character_map[char] for char in text]
            num_lines = len(ascii_characters[0])
            combined_lines = ['' for _ in range(num_lines)]
            for character in ascii_characters:
                for i, line in enumerate(character):
                    combined_lines[i] += line + delimiter
            return '\n'.join(combined_lines)
        except KeyError as e:
            raise ValueError(f"Invalid character in text: {e}")
    
    def get_colors():
        return ['BLACK', 'RED', 'GREEN', 'YELLOW', 'BLUE', 'MAGENTA', 'CYAN', 'WHITE', 'RESET']
